AWSTemplateFormatVersion: "2010-09-09"
Description: "(SA0009) - sagemaker-deep-demand-forecast:
  Solution for training deep learning models for demand forecasting using Amazon SageMaker.
  Version 1"
Parameters:
  S3BucketName:
    Description: |
      Enter the name of the S3 bucket for the solution.
      Leaving it empty assigns the default S3 bucket in your account automatically.
      Note: Allowed names should follow the regex pattern [a-zA-Z0-9]*
    Type: String
    Default: ""
    AllowedPattern: "[a-zA-Z0-9]*"
  SageMakerNotebookInstanceType:
    Description: Instance type of the SageMaker notebook instance to be used for this solution
    Type: String
    Default: "ml.t3.medium"
  StackVersion:
    Description: |
      CloudFormation Stack version.
      Use "release" version unless you are customizing the
      CloudFormation templates and the solution artifacts in S3 bucket
    Type: String
    Default: release
    AllowedValues:
      - release
      - dev
  SolutionS3BucketName:
    Description: |
      Amazon S3 Bucket containing solution artifacts. Leave it empty if you are trying this solution.
      Specify only if you are customizing the solution with your own artifacts
    Type: String
Conditions:
  IsRelease: !Equals [!Ref StackVersion, release]
Mappings:
  SolutionsS3BucketNameBase:
    Release:
      Bucket: "sagemaker-solutions"
    Dev:
      Bucket: "sagemaker-solutions-build"
  Notebook:
    Source:
      S3Key: "sagemaker-deep-demand-forecast/src"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: S3 Configuration
        Parameters:
          - S3BucketName
      - Label:
          default: SageMaker Configuration
        Parameters:
          - SageMakerNotebookInstanceType
    ParameterLabels:
      S3BucketName:
        default: Bucket Name
      SageMakerNotebookInstanceType:
        default: SageMaker Notebook Instance
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: "Retain"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Configuring logging requires supplying an existing customer S3 bucket to store logs
          - id: W51
            reason: Default access policy suffices
  NotebookInstanceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      RoleName: !Sub ${AWS::StackName}-${AWS::Region}-deep-demand-forecast-sagemaker-role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Using explicit name to restrict permissions
  NotebookInstanceIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-${AWS::Region}-deep-demand-forecast-instance-policy"
      Roles:
        - !Ref NotebookInstanceExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sagemaker:CreateTrainingJob
              - sagemaker:DescribeTrainingJob
              - sagemaker:CreateProcessingJob
              - sagemaker:DescribeProcessingJob
              - sagemaker:CreateModel
              - sagemaker:DescribeEndpointConfig
              - sagemaker:DescribeEndpoint
              - sagemaker:CreateEndpointConfig
              - sagemaker:CreateEndpoint
              - sagemaker:DeleteEndpointConfig
              - sagemaker:DeleteEndpoint
              - sagemaker:DeleteModel
              - sagemaker:InvokeEndpoint
            Resource:
              - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:CreateRepository
              - ecr:DescribeRepositories
              - ecr:InitiateLayerUpload
              - ecr:CompleteLayerUpload
              - ecr:UploadLayerPart
              - ecr:TagResource
              - ecr:PutImage
            Resource:
              - "*"
              - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
            Resource:
              - !Sub "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !GetAtt NotebookInstanceExecutionRole.Arn
            Condition:
              StringEquals:
                iam:PassedToService: sagemaker.amazonaws.com
          - Effect: Allow
            Action:
              - iam:GetRole
            Resource:
              - !GetAtt NotebookInstanceExecutionRole.Arn
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub
              - "arn:aws:s3:::${SolutionS3BucketName}-${AWS::Region}"
              - SolutionS3BucketName:
                  !If [
                    IsRelease,
                    !FindInMap [SolutionsS3BucketNameBase, Release, Bucket],
                    !FindInMap [SolutionsS3BucketNameBase, Dev, Bucket],
                  ]
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub
              - "arn:aws:s3:::${SolutionS3BucketName}-${AWS::Region}/sagemaker-deep-demand-forecast/*"
              - SolutionS3BucketName:
                  !If [
                    IsRelease,
                    !FindInMap [SolutionsS3BucketNameBase, Release, Bucket],
                    !FindInMap [SolutionsS3BucketNameBase, Dev, Bucket],
                  ]
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketName}"
              - !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: ECR GetAuthorizationToken is non resource-specific action

  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      DirectInternetAccess: Enabled
      InstanceType: !Ref SageMakerNotebookInstanceType
      LifecycleConfigName: !GetAtt LifeCycleConfig.NotebookInstanceLifecycleConfigName
      NotebookInstanceName: !Sub ${AWS::StackName}
      RoleArn: !GetAtt NotebookInstanceExecutionRole.Arn
      VolumeSizeInGB: 100
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W1201
            reason: Solution does not have KMS encryption enabled by default

  LifeCycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnStart:
        - Content:
            Fn::Base64: |
              set -e
              sudo -u ec2-user -i <<EOF
              cd /home/ec2-user/SageMaker
              conda activate mxnet_p36
              python -m pip install pip --upgrade
              python -m pip install sagemaker --upgrade
              python -m pip install -r ./deep_demand_forecast/requirements.txt
              EOF
      OnCreate:
        - Content:
            Fn::Base64: !Join
              - ";"
              - - cd /home/ec2-user/SageMaker
                - !Join
                  - ""
                  - - aws s3 sync s3://
                    - !Sub
                      - ${SolutionS3BucketName}-${AWS::Region}
                      - SolutionS3BucketName:
                          !If [
                            IsRelease,
                            !FindInMap [
                              SolutionsS3BucketNameBase,
                              Release,
                              Bucket,
                            ],
                            !FindInMap [SolutionsS3BucketNameBase, Dev, Bucket],
                          ]
                    - "/"
                    - !FindInMap [Notebook, Source, S3Key]
                    - " ."
                - sudo chown -R ec2-user:ec2-user *
Outputs:
  NotebookInstanceId:
    Description: "SageMaker Notebook instance id"
    Value: !Ref NotebookInstance

  SageMakerNotebookInstanceSignOn:
    Description: "Link to the SageMaker notebook instance"
    Value: !Sub "https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${NotebookInstance.NotebookInstanceName}?view=classic"
